# Problem Set Three

# Problem 1: Choose Your Pokemon
def choose_pokemon(my_pokemon):
	for pokemon in my_pokemon:
		print(f"{pokemon} I choose you!")

# Call the function so that it prints out the following to the console:
# Pikachu I choose you!
# Charizard I choose you!
# Eevee I choose you!
pokemon = ['Pikachu', 'Charizard', 'Eevee']

choose_pokemon(pokemon)


# Problem 2: Rotate Left
# Write a function rotate_left() that takes in a string s and an integer n as parameters. 
# The function returns a new string with the first n characters moved to the end of the 
# string where 1 <= n <= len(str).
def rotate_left(s: str, n: int):
	if n == len(s):
		prefix = ''.join(s[n])
	else:
		prefix = ''.join(s[n:])
	for i in range(0, n):
		prefix += s[i]
	return prefix

string = "excaliburatious"
print(rotate_left(string, 5))


# Problem 3: First Duplicate
# Write a function first_repeated_char() that takes in a string s as a parameter and returns 
# the index of the first repeated character in the string. Uppercase and lowercase letters 
# are considered different characters, and the function returns None if there are no repeated characters.
def first_repeated_char(s: str):
	count = 0
	comparison_char = s[0]
	character_index = None
	
	for i in range(len(s)):
		if s[i] == comparison_char:
			if count == 0:
				character_index = i
			count += 1
			if count > 1:
				return character_index
		else:
			comparison_char = s[i]
			count = 0
			character_index = None
	
	return character_index
			
word = 'adfdsfsfff'
print(first_repeated_char(word))

# Problem 4: Find the Imposter
# Write a function find_difference() that takes two strings as parameters. The second string is 
# generated by shuffling the first string and adding one more letter at a random position. Search 
# for and return the added letter.
import random

def string_randomizer(original_string: str):
	indexes = [i for i in range(len(original_string))]
	shuffled_string = ''
	for _ in range(len(original_string)):
		random_index = random.choice(indexes)  # choose a random index
		indexes.remove(random_index)  # remove THAT specific index from the list
		shuffled_string += original_string[random_index]  # use it to build the shuffled string
	alphabet = [
		'a', 'b', 'c', 'd', 'e', 'f', 'g',
		'h', 'i', 'j', 'k', 'l', 'm', 'n',
		'o', 'p', 'q', 'r', 's', 't', 'u',
		'v', 'w', 'x', 'y', 'z']
	
	for letter in shuffled_string:
		if letter in alphabet:
			alphabet.remove(letter)

	random_imposter = random.choice(alphabet)
	shuffled_string += random_imposter

	return shuffled_string


def find_difference(string_one: str, string_two: str):
	imposter = ''
	for letter in string_two:
		if letter not in string_one:
			imposter += letter
			return imposter
	
first_string = 'testing'
second_string = string_randomizer(first_string)
print(second_string)

print(find_difference(first_string, second_string))

# Problem 5: Longest Substring
# Write a function that takes in a string s and returns the length of the longest substring
# without repeating characters.

def longest_substring(s: str):
	substring_dict = {}

	character_array = []

	count = 0
	for char in s:
		if char not in character_array:
			character_array.append(char)
			count += 1
		else:
			substring = ''.join(character_array)
			substring_dict[substring] = count
			character_array = []
			count = 0
	
	biggest_substring = max(substring_dict.items(), key=lambda x: x[1])

	return biggest_substring[0]


string_test = 'abcdefhgikaskdnwkemkfd'
print(longest_substring(string_test))

# Problem 6: Roman to Integer
# Roman Numerals are represented by seven different symbols (I, V, X, L, C, D, and M) 
# and have these corresponding values:

# I = 1 V = 5
# X = 10 L = 50
# C = 100 D = 500
# M = 1000

# For example, 2 is written as II, which is just two ones added together.
# 12 is written as XII, which is simply X + II.
# The number 27 is written as XXVII, which is XX + V + II.

# Roman numerals are usually written largest to smallest from left to right. 
# However, the numeral for 4 is not IIII. Instead, the number 4 is written as IV.

# Because the I is before the V, we subtract it to equal 4. The same principle applies 
# to the number 9, which is written as IX. There are six instances where subtraction is used:

#     I can be placed before V (5) and X (10) to make 4 and 9
#     X can be placed before L (50) and C (100) to make 40 and 90
#     C can be placed before D (500) and M (1000) to make 400 and 900

# Write a function roman_to_int() that takes in a string s that makes up a roman numeral. 
# The function should return the integer value of s.

def roman_to_int(s: str):
    roman_numeral_dict = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }

    numeral_int = []
    index = 0

    while index < len(s):
        current_numeral = roman_numeral_dict[s[index]]

        # Check for next numeral before using it
        if index + 1 < len(s):
            next_numeral = roman_numeral_dict[s[index + 1]]

            if current_numeral < next_numeral:
                numeral_int.append(next_numeral - current_numeral)
                index += 2
                continue  # Skip rest of loop and go to next pair

        # If not subtractive, or end of string, handle current numeral
        numeral_int.append(current_numeral)
        index += 1

    summation = sum(numeral_int)
    return summation


print(roman_to_int("CDV"))  # → 405
print(roman_to_int("MCMXCIV"))  # → 1994
print(roman_to_int("III"))  # → 3
print(roman_to_int("XL"))  # → 40
